package main

import (
	"bytes"
	"go/format"
	"os"
	cm "rycus86/githooks/common"
	"rycus86/githooks/git"
	"text/template"
)

var pkg = "version"
var verFile = "version/version.go"

var versionTpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package {{ .Package }}

var BuildCommit = "{{ .Commit }}"
var BuildVersion = "{{ .Version }}"
`))

func main() {

	gitx := git.Ctx()

	commitSHA, err := git.GetCommitSHA(gitx, "HEAD")
	cm.AssertNoErrorPanicF(err, "GetCommitSHA failed.")

	ver, err := git.GetVersion(gitx, "HEAD")
	cm.AssertNoErrorPanicF(err, "GetVersion failed.")

	// Create or overwrite the go file from template
	var buf bytes.Buffer
	err = versionTpl.Execute(&buf, struct {
		Package string
		Version string
		Commit  string
	}{
		Package: pkg,
		Version: ver.String(),
		Commit:  commitSHA,
	})
	cm.AssertNoErrorPanicF(err, "Setting template failed.")

	// Format
	src, err := format.Source(buf.Bytes())
	cm.AssertNoErrorPanicF(err, "Formatting template failed.")

	// Write to disk (in the Current Working Directory)
	f, err := os.Create(verFile)
	cm.AssertNoErrorPanicF(err, "Opening template file.")
	defer f.Close()

	_, err = f.Write(src)
	cm.AssertNoErrorPanicF(err, "Opening template file.")
}
