//go:build tools

package main

import (
	"bytes"
	"go/format"
	"os"
	"path"
	"text/template"

	cm "github.com/gabyx/githooks/githooks/common"
	"github.com/gabyx/githooks/githooks/git"
	strs "github.com/gabyx/githooks/githooks/strings"
	"github.com/hashicorp/go-version"
)

var pkg = "build"
var verFile = "build/version.go"

var versionTpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package {{ .Package }}

import 	(
	"github.com/hashicorp/go-version"
	cm "github.com/gabyx/githooks/githooks/common"
)

var BuildVersion = "{{ .Version }}"
var BuildTag = "{{ .Tag }}"

func GetBuildVersion() *version.Version {
	ver, _ := version.NewVersion(BuildVersion)
	cm.DebugAssertF(ver != nil, "Wrong build version '%s'", ver)
	return ver
}
`))

func main() {

	gitx := git.NewCtxSanitized()

	// We are located in the runner, because there is the generate command.
	srcDir, _ := os.Getwd()
	srcDir = path.Join(srcDir, "../..")

	var err error
	var tag string
	var ver *version.Version

	versionOverride := os.Getenv("GH_BUILD_VERSION")
	if strs.IsNotEmpty(versionOverride) {
		ver, err = version.NewVersion(versionOverride)
		cm.AssertNoErrorPanicF(err, "Could not parse version.")

		tag = os.Getenv("GH_BUILD_TAG")
		cm.PanicIfF(strs.IsEmpty(tag), "Tag is empty '%s'", tag)

	} else {
		root, err := gitx.Get("rev-parse", "--show-toplevel")
		cm.AssertNoErrorPanicF(err, "Could not root dir.")
		srcDir = path.Join(root, "githooks")

		ver, tag, err = git.GetVersion(gitx, git.HEAD, "v*") // The tags to match always start with "v...."
		cm.AssertNoErrorPanicF(err, "GetVersion failed.")
	}

	// Create or overwrite the go file from template
	var buf bytes.Buffer
	err = versionTpl.Execute(&buf, struct {
		Package string
		Version string
		Tag     string
	}{
		Package: pkg,
		Version: ver.String(),
		Tag:     tag,
	})
	cm.AssertNoErrorPanicF(err, "Setting template failed.")

	// Format
	src, err := format.Source(buf.Bytes())
	cm.AssertNoErrorPanicF(err, "Formatting template failed.")

	// Write to disk (in the Current Working Directory)
	file := path.Join(srcDir, verFile)
	f, err := os.Create(file)
	cm.AssertNoErrorPanicF(err, "Opening template file failed.")
	defer f.Close()

	_, err = f.Write(src)
	cm.AssertNoErrorPanicF(err, "Writing template file failed.")
}
